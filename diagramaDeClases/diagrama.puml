@startuml 

title DriveHub - diagrama de class

abstract class Vehiculo {
    - matricula: string
    - marca: string
    - modelo: string
    - estado: IEstadoVehiculo
    - mantenimiento: Mantenimiento
    - tarifa: Tarifa
    + getters_y_setters()
    + programarMantenimiento(mantenimiento: Mantenimiento): void
    + finalizarMantenimiento(): void

}

abstract class Tarifa{
    - tarifaBase: number
    - cargoPorKmRecorrido: number
    + getters_y_setters()
    + abstract calcularCosto(duracion: number, kilometro: number): number
}

class TarifaSUV extends Tarifa {
    - cargoPorSeguro: number

    + getters_y_setters
}


class Cliente {
    - idCliente
    - nombre
    - reserva: Reserva
    + getters_y_setters()
}

class Kilometraje{
    -kmsRecorridosPorDia: Map<number,number>

    + getters_y_setters()
    + setKmsRecorridosPorDia()
    + getKmsRecorridosPorDia()
    + calcularKmsTotalesRecorridos(): number
}

class Mantenimiento{
    - costo: number
    - fechaInicio: Date
    - fechaFin: Date
    - descripcion: string
}

class Reserva{
    - fechaInicio: Date
    - fechaFin: Date
    - kilometraje: Kilometraje
    - vehiculo: Vehiculo
    - cliente: Cliente
    + obtenerCostoTotal(): number
}

class DateUtils {
    + static obtenerDiasDuracion(fechaInicio: Date, fechaFin: Date): number
}

' Ver COMO IMPLEMENTAR
' porque tiene que haber una clase para CADA estado, que implemente
' y sobreescriba los metodos de la interfaz
interface IEstadoVehiculo {
    + alquilar(vehiculo: Vehiculo, cliente:Cliente, fechaInicio: date, fechaFin:Date): void
    + devolver(v: Vehiculo): void
    + iniciarMantenimiento(v: Vehiculo): void
    + finalizarMantenimiento(fechaFin: Date)
    + marcarComoDisponible(v: Vehiculo): void
    + iniciarLimpieza(v:Vehiculo): void
}

' Relaciones

Vehiculo <|-d- Compacto
Vehiculo <|-d- Sedan
Vehiculo <|-d- SUV

Tarifa <|-d- TarifaCompacto
Tarifa <|-d- TarifaSedan

Vehiculo -r- Tarifa
Vehiculo o-l- Mantenimiento

Reserva -- Vehiculo
Reserva *-r- Kilometraje

Cliente "1" -- "1" Reserva
' bidireccional

@enduml